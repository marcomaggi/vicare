Subject: [announce] Vicare Scheme revision 0.2d17

                             Vicare Scheme
                             =============


Vicare Scheme is an R6RS compliant fork of Ikarus Scheme, aiming to be a
native compiler for R6 Scheme producing single threaded programs running
on  Intel x86 32-bit  processors, with  experimental support  for 64-bit
machines; it is tested only  on GNU+Linux, no official support for other
platforms is present.  It implements a foreign-functions interface based
on Libffi.  "Vicare" is pronounced the etruscan way.

  The latest  version of this package  can be downloaded  from Github or
Google Code:

	<http://code.google.com/p/vicare-scheme/downloads/list>
            <http://github.com/marcomaggi/vicare/downloads>

the home page of the Vicare project is at:

               <http://marcomaggi.github.com/vicare.html>

development takes place at:

                 <http://github.com/marcomaggi/vicare/>

and as backup at:

		     <http://gitorious.org/vicare>

this project has a mailing list:

	     <http://groups.google.com/group/vicare-users>

  It  is suggested to  use Vicare  Scheme along  with Nausicaa,  a large
collection of R6 Scheme libraries:

	      <http://marcomaggi.github.com/nausicaa.html>


Notes for revision 0.2d17
-------------------------

* Added  size_t, ssize_t,  off_t,  ptrdiff_t as  type  specifiers for  C
  language callouts and callbacks.

* Added limits to (vicare words):

    greatest-c-size_t			least-c-size_t
    greatest-c-ssize			least-c-ssize_t
    greatest-c-off_t			least-c-off_t
    greatest-c-ptrdiff_t		least-c-ptrdiff_t
    greatest-c-size_t*			least-c-size_t*
    greatest-c-ssize_t			least-c-ssize_t*
    greatest-c-off_t*			least-c-off_t*
    greatest-c-ptrdiff_t*		least-c-ptrdiff_t*

* Reorganised IK_VOIDP_FROM and similar C preprocessor macros.

* Added automatic generation of unsafe  accessor and mutator syntaxes to
  DEFINE-STRUCT; in the following example:

    (define-struct color
      (red green blue))

  in addition to the safe accessor and mutator definitions for:

    color-red		set-color-red!
    color-green		set-color-green!
    color-blue		set-color-blue!

  unsafe accessors and mutator definitions for:

    $color-red		$set-color-red!
    $color-green	$set-color-green!
    $color-blue		$set-color-blue!

  are generated with code like:

    (define-syntax $color-red
      (syntax-rules ()
        ((_ x)
	 ($struct-ref x 0))))

    (define-syntax $set-color-red!
      (syntax-rules ()
        ((_ x v)
	 ($struct-set! x 0 v))))

* Added automatic generation of unsafe  accessor and mutator syntaxes to
  DEFINE-RECORD-TYPE  as  extension (and  violation?)  of  R6RS; in  the
  following example:

    (define-record-type color
      (fields (mutable red)
              (mutable green)
	      (mutable blue)))

  in addition to the safe accessor and mutator definitions for:

    color-red		color-red-set!
    color-green		color-green-set!
    color-blue		color-blue-set!

  unsafe accessors and mutator definitions for:

    $color-red		$color-red-set!
    $color-green	$color-green-set!
    $color-blue		$color-blue-set!

  are generated with code like:

    (define-syntax $color-red
      (syntax-rules ()
        ((_ x)
	 ($struct-ref x 0))))

    (define-syntax $color-red-set!
      (syntax-rules ()
        ((_ x v)
	 ($struct-set! x 0 v))))

* Added new  documentation node "overview extensions"  for extensions to
  R6RS.


Notes for revision 0.2d16
-------------------------

* Added C language preprocessor macros:

    IK_IS_BOOLEAN
    IK_BOOLEAN_TO_INT
    IK_BOOLEAN_FROM_INT

  along with others documented in the "objects misc" node.

* Added functions to convert immediate  Scheme objects and references to
  Scheme objects to pointer objects:

    pointer->scheme-object
    scheme-object->pointer

  such functions allow to hand a  Scheme object to a foreign function as
  opaque value.   Such functions  are meant  to be  used along  with the
  garbage collection avoidance API.

* Changed STRUCT-RESET to set all the fields of a struct to void, rather
  than to false.

* Added functions to convert from  raw memory strings in UTF-16 encoding
  to bytevectors and Scheme strings:

    cstring16->bytevector
    cstring16n->string
    cstring16le->string
    cstring16be->string

* Fixed bug in BYTEVECTOR->CSTRING  erroneously using "strncpy()" rather
  than a verbatim copy of the bytes.

* When the  reader is in "#!vicare" mode: "++" and "--" are now accepted
  identifiers.

* Added (vicare infix) providing an infix to prefix transformer.

* Added data structure MEMORY-BLOCK to reference a raw memory block with
  both  a pointer  and its  size.   Many functions  accepting a  pointer
  object as argument now accept a memory block too.

* MALLOC, REALLOC, CALLOC, MEMCPY,  MEMMOVE, MEMSET, MEMCMP, STRNCMP and
  STRNDUP now accept a "size_t"  exact integer as count argument, rather
  than a fixnum.

* Fixed bug  in GUARDED-REALLOC  causing the return  value to  be always
  NULL.

* Added functions to poke and peek  values to and from raw memory arrays
  (like POINTER-SET  and POINTER-REF,  but ARRAY-SET and  ARRAY-REF with
  scaled offsets).

* Added inclusive and  exclusive limits for C language  types in (vicare
  words).


Notes for revision 0.2d15
-------------------------

* NULL-POINTER now returns a newly allocated pointer object, rather than
  returning always the same one.

* Fixed missing normalisation of some FASL pathnames.

* "make installcheck" should now work (I hope definitely).

* When running "make vfasl" to precompile libraries from the build tree:
  the FASL files are now created under $(builddir)/lib/fasl, rather than
  polluting a system FASL cache directory.

* More constants as identifiers syntaxes in (vicare words):

    SIZEOF_CHAR
    SIZEOF_SHORT        SIZEOF_INT
    SIZEOF_LONG         SIZEOF_LONG_LONG
    SIZEOF_SIZE_T       SIZEOF_SSIZE_T
    SIZEOF_OFF_T
    SIZEOF_FLOAT        SIZEOF_DOUBLE
    SIZEOF_POINTER

* The following symbols substitutions have been imposed on the C code:

    false_object	-> IK_FALSE_OBJECT
    true_object		-> IK_TRUE_OBJECT
    null_object		-> IK_NULL_OBJECT
    eof_object		-> IK_EOF_OBJECT
    void_object		-> IK_VOID_OBJECT
    unbound_object	-> IK_UNBOUND_OBJECT
    bwp_object		-> IK_BWP_OBJECT

  and the following aliases defined: IK_FALSE, IK_TRUE, IK_NULL, IK_EOF,
  IK_VOID, IK_UNBOUND, IK_BWP.

* Added STRUCT-RESET  to (vicare), to  reset to #f  all the fields  of a
  structure.

* Added REGCOMP/DISOWN to (vicare glibc).

* Added syntaxes to (vicare syntactic-extensions):

    case-integers
    define-exact-integer->symbol-function

* Added experimental API to avoid garbage collection of objects:

	register-to-avoid-collecting
	forget-to-avoid-collecting
	collection-avoidance-list
	purge-collection-avoidance-list

* Added documentation  for some, but  not all, the syntaxes  exported by
  (vicare syntactic-extensions).


Notes for revision 0.2d14
-------------------------

* Added  library (vicare  platform  features)  exporting one  identifier
  syntax for each HAVE_ constant  defined by "configure".  At present it
  is maintained by hand.

* Fixed distributions of Scheme libraries and test files.

* Fixed GNU  Automake stuff to  have the "make distcheck"  rule complete
  successfully despite some test failures.


Notes for revision 0.2d13
-------------------------

* More platform  constants in  (vicare platform-constants),  which means
  that running "configure" takes longer (sorry).  But, when POSIX, Glibc
  and  Linux are  disabled: the  associated platform  constants are  not
  checked anymore, making running "configure" much faster.

* Added POSIX timers API to (vicare posix).

* Added resource usage and limits API to (vicare posix).

* Added PRLIMIT to (vicare linux).

* Added functions  to (vicare posix):  CLOCK-GETCPUCLOCKID, SIGWAITINFO,
  SIGTIMEDWAIT.

* Added inotify API to (vicare linux).


Notes for revision 0.2d12
-------------------------

* The runtime program "vicare" is now linked with -lrt.

* Added miscellaneous functions to (vicare posix): TRUNCATE, FTRUNCATE.

* Added  realtime  clock  functions  to  (vicare  posix):  CLOCK-GETRES,
  CLOCK-GETTIME, CLOCK-SETTIME.

* Added POSIX message queue API to (vicare posix).

* Added POSIX shared memory API to (vicare posix).

* Added POSIX semaphores API to (vicare posix).

* Added timerfd API to (vicare linux).

* Added the function STRUCT=? to (vicare).

* Miscellaneous bug fixes (a killer one in MMAP).


Notes for revision 0.2d11
-------------------------

* The function GET-CHAR-AND-TRACK-TEXTUAL-POSITION increments the column
  number by 8 when a tab character is read, rather than by 1.

* When exiting a running Vicare process from the debugger by typing "q":
  the exit status is now 99 rather than 0.

* The function  SYNTAX-VIOLATION no more  flattens the form  and subform
  arguments from syntax objects  to symbolic expressions, syntax objects
  are kept.

* Added PRETTY-PRINT*, like  PRETTY-PRINT but accepts some configuration
  arguments.

* Multiple FASL  directories are now supported.  Files  are now searched
  in a path to allow  both system precompiled files and user precompiled
  files.   The  environment   variable  VICARE_FASL_PATH  allows  adding
  directories to the search path.

* Added command line options:  --fasl-directory, to override the default
  value of the parameter FASL-DIRECTORY; --fasl-path, to add directories
  to the default value of the parameter FASL-SEARCH-PATH.

* Added command line option --print-loaded-libraries, to print pathnames
  of loaded libraries.

* The documentation file has been renamed to "vicare-scheme.texi".


Notes for revision 0.2d10
-------------------------

* Changed  FASL-DIRECTORY  pathname validator  to  accept only  existent
  string pathnames.

* Added  keyword objects  handling  to the  boot  image.  Added  library
  (vicare keywords) with facilities for keyword objects.

* BACKWARDS INCOMPATIBILITY The reader syntax:

    #:symbol

  is now used to read keyword objects wrapping the SYMBOL rather than to
  build a  gensym using SYMBOL as  pretty name.  At present  there is no
  more a syntax to read a gensym with a given pretty name.

* Added documentation for:

    TRACE-DEFINE-SYNTAX
    TRACE-LET-SYNTAX
    TRACE-LETREC-SYNTAX

* Added dangerous inspection functions to (vicare):

    INTEGER->MACHINE-WORD
    MACHINE-WORD->INTEGER

* Added library  (vicare parser-logic) exposing the  parser builder used
  internally for  both STRING->NUMBER  and the string-to-number  code in
  the reader.

* Added functions to (vicare posix):

    split-search-path
    split-search-path-bytevector
    split-search-path-string
    split-pathname
    split-pathname-bytevector
    split-pathname-string
    find-executable-as-bytevector
    find-executable-as-string
    vicare-executable-as-bytevector
    vicare-executable-as-string


Notes for revision 0.2d9
------------------------

* The package  name, selected in  "configure.ac", has been  changed from
  "vicare" to "vicare-scheme".

* Added built in library  (vicare language-extensions) exporting all the
  bindings exported by (vicare) not exported by (rnrs (6)).

* Added to (vicare ffi) more system-agnostic functions to load a foreign
  shared library.

* Added raw  memory allocation functions  raising exceptions in  case of
  error.

* Documentation was written for  some of the libraries distributed under
  the hierarchy (vicare ---).

* Added documentation  appendix showing how  to exchange raw  and Scheme
  data among Vicare processes using mmapped interprocess shared memory.

* BACKWARDS INCOMPATIBILITY  The functions SYSCONF,  PATHCONF, FPATHCONF
  and CONFSTR  have been  moved from the  library (vicare glibc)  to the
  library (vicare posix).

* Added to (vicare posix) functions: SETITIMER, GETITIMER, ALARM, MLOCK,
  MUNLOCK,   MLOCKALL,  MUNLOCKALL,   MPROTECT,  SELECT-FD-EXCEPTIONAL?,
  SELECT-FD-WRITABLE?, SELECT-FD-READABLE?.

* Added to (vicare linux) functions: SIGNALFD.

* Added library (vicare simple-event-loop).


Notes for revision 0.2d8
------------------------

* Added  configuration  option  "--with-pthread"  to link  the  "vicare"
  executable with the pthread library.  The executable was always linked
  with pthread before, now it is *not* by default.

* Changed default  for configuration option "--with-iconv"  from "no" to
  "check", when  the option is  not specified: the  configuration script
  checks if  an iconv library is available,  but it does not  fail if it
  does not find it.

* CONFIGURATION  BACKWARDS   INCOMPATIBILITY  The  configuration  option
  "--enable-libffi"  has been renamed  to "--with-libffi".   Its default
  value  has  changed from  "no"  to "check",  when  the  option is  not
  specified:  the configuration  script checks  if a  libffi  library is
  available, but it does not fail if it does not find it.

* Added   configuration  option   "--with-readline"  enabling   a  basic
  interface to GNU Readline or compatible library.  By default, when the
  option  is  not  specified:  the  configuration  script  checks  if  a
  compatible library is  available, but it does not fail  if it does not
  find  it.   The  following  bindings  are  exported  by  (vicare)  and
  (icarus):

     readline-enabled?
     readline
     make-readline-input-port

* The C language functions allocating Scheme bytevectors by copying from
  raw memory blocks will *silently  truncate* the input if its length is
  greater than the most positive fixnum.  (This is dirty, I know.)

* BACKWARDS INCOMPATIBILITY Libraries in  the (vicare ---) hierarchy are
  now   installed    under   "$(libdir)/scheme"   rather    than   under
  "$(libdir)/vicare"; the LIBRARY-PATH parameter now includes both these
  directories.     The   boot   image    is   still    installed   under
  "$(libdir)/vicare".

* Added  reader syntax  "#ve(<encoding> <data>)"  to read  bytevector in
  some  form of  encoding.   At present  it  supports converting  Scheme
  strings to  bytevectors using the  conversion function: string->ascii,
  string->latin1, string->utf8, etc.  Example:

     #ve(ascii "hello\n") => #vu8(104 101 108 108 111 10)

* Added  reader syntaxes "#ci<form>"  and "#cs<form>"  to read  the next
  form with case insensitive or case sensitive identifiers.  When a case
  insensitive  identifier is  read: its  string name  is  passed through
  STRING-FOLDCASE.   (These  syntaxes should  be  like  the Chicken  and
  Racket ones.)

* Added reader syntaxes for custom named characters:

    ;define "lambda" as synonym for #\x0E88
    #!(char-names (lambda . #\x0E88))

    ;standalone character
    #\{lambda}		=> #\x0E88

    ;character embedded in string
    "\{lambda}"		=> "\x0E88;"

* Added support for epoll API to (vicare linux).


Notes for revision 0.2d7
------------------------

* Boot images were regenerated.

* Added PARAMETRISE as alias for PARAMETERIZE.

* Parameter functions now accept 0, 1 or 2 values and work as follows:

    (let ((the-value <init-value>)
          (guard <guard-func>))
      (case-lambda
        (()
         the-value)
        ((new-value)
         (set! the-value (guard new-value)))
        ((new-value guard?)
         (if guard?
             (set! the-value (guard new-value))
           (set! the-value new-value)))))

* BACKWARDS INCOMPATIBILITY The  function MAKE-PARAMETER does *not* pass
  the  parameter's  initialisation  value  through  the  guard  function
  anymore.

* POSSIBLE BACKWARDS INCOMPATIBILITY The PARAMETERIZE syntax applies the
  parameter's guard  function when setting  a new value, but  does *not*
  apply it when restoring the original parameter's value.

* Added  command  line  option  to  the "vicare"  executable  to  enable
  entering a  debugging REPL whenever the interprocess  signal SIGINT is
  received.  It was enabled by default, now it is disabled by default.

* Added  functions  ASCII->STRING and  STRING->ASCII  to convert  Scheme
  strings to and from bytevectors holding ASCII representations.

* Functions acting  on pointers, allocating  raw memory and acting  on C
  strings, that  were exported by (vicare  ffi) but do  not need Libffi,
  are  now exported  by (vicare)  and  (ikarus) and  also reexported  by
  (vicare ffi).  This change should be backwards compatible.

* Syntax  bindings associated  to  the "errno"  variable, including  the
  error  code constants,  are now  exported by  the new  library (vicare
  errno).     The   constants   are    also   reexported    by   (vicare
  platform-constants).   The  CASE-ERRNO  and  ERRNO-CODE  syntaxes  are
  reexported  by   (vicare  ffi).   This  change   should  be  backwards
  compatible.

* Added library (vicare weak-hashtables) implementing hashtables holding
  weak references to keys and strong references to values.

* Added   "--disable-posix",  "--disable-glibc"   and  "--disable-linux"
  options  to  the "configure"  script  to  disable  inclusion of  POSIX
  bindings, GNU C Library specific bindings and Linux specific bindings.

* BACKWARDS  INCOMPATIBILITY Scheme  functions for  POSIX  bindings have
  been  moved out  of the  boot  image; they  are only  exported by  the
  (vicare  posix) library.   POSIX functions  whose names  were prefixed
  with "posix-" to avoid collision are now unprefixed:

     posix-read		-> read
     posix-write	-> write
     posix-remove	-> remove
     posix-time		-> time

  RAISE-SIGNAL has been renamed  to RAISE.  Collision between names from
  (vicare) and  names from  (vicare posix) can  be avoided  by prefixing
  bindings from (vicare posix) in the import spec; example:

     (import (vicare)
       (prefix (vicare posix) px.))

* Added POSIX functions for memory-mapped input/output:

    mmap		munmap
    msync		mremap
    madvise

* Added POSIX function POLL.

* Added  to  (vicare  posix)  simple  block/unblock  (BUB)  interprocess
  signals API.

* When "--enable-libffi"  is not used:  the library (vicare ffi)  is not
  installed   anymore.     Fixed   bug   causing    build   error   when
  "--enable-libffi" is not used.


Notes for revision 0.2d6
------------------------

* Big C code review to fix  bad handling of allocated Scheme object with
  respect to garbage collection.

* The documentation of the  C language internals for manipulating Scheme
  objects  has  been reviewed  and  extended  (it  is still  incomplete,
  though).

* The Scheme  code for the glibc  and linux functions has  been moved in
  standalone libraries, out of the  boot image.  The public interface to
  these libraries is unchanged.

* Added  support   for  autoloading  foreign   libraries  associated  to
  precompiled  library files.   The packaging  infrastructure  needs GNU
  Libtool now.

* Optional support for the Iconv API has been added to (vicare glibc) by
  linking with  Libiconv.  By default  disabled, to enable it:  give the
  --with-iconv option to the "configure" script.

* Optional  binding to  the CRE2  library  has been  added.  By  default
  disabled, to enable it use the "--with-cre2" configuration option.

* Added reader syntaxes  to read bytevectors of flonums  and cflonums in
  single and double precision:

    #vf4l #vf4b #vf4n		#vf8l #vf8b #vf8n
    #vc4l #vc4b #vc4n		#vc8l #vc8b #vc8n

* Added conversion  functions between lists of flonums  and cflonums and
  bytevectors:

    f4l-list->bytevector	bytevector->f4l-list
    f4b-list->bytevector	bytevector->f4b-list
    f4n-list->bytevector	bytevector->f4n-list
    f8l-list->bytevector	bytevector->f8l-list
    f8b-list->bytevector	bytevector->f8b-list
    f8n-list->bytevector	bytevector->f8n-list

    c4l-list->bytevector	bytevector->c4l-list
    c4b-list->bytevector	bytevector->c4b-list
    c4n-list->bytevector	bytevector->c4n-list
    c8l-list->bytevector	bytevector->c8l-list
    c8b-list->bytevector	bytevector->c8b-list
    c8n-list->bytevector	bytevector->c8n-list


Notes for revision 0.2d5
------------------------

* Added users and groups, process control, time related functions to the
  POSIX API.

* Some functions where added to (vicare glibc).

* Better  use of  GNU  Autotools and  better  tracking of  files in  the
  repository.

* The "main()" function now calls:

     setlocale(LC_ALL, "")

* The FFI library is now  (vicare ffi).  FFI code and documentation have
  been reviewed.  They need more testing.

* A toy library to build and  load shared libraries at runtime using GCC
  has been added, (vicare gcc).


Notes for revision 0.2d4
------------------------

* The POSIX API  is exported by the (vicare posix)  library, and also by
  (ikarus) and (vicare).

* The GNU C Library API is exported by the (vicare glibc) library.

* The Linux API is exported by the (vicare linux) library.

* Socket functions have been added to the POSIX API.

* Some documentation on handling Scheme  objects at the C language level
  has been written.


Notes for revision 0.2d3
------------------------

* The configuration process is now really long (sorry).

* Restructured most of the POSIX API, in a way non-backwards compatible.
  Still no sockets API available in this release.

* Added the functions:

    make-binary-file-descriptor-input-port
    make-binary-file-descriptor-input-port*
    make-binary-file-descriptor-output-port
    make-binary-file-descriptor-output-port*
    make-binary-file-descriptor-input/output-port
    make-binary-file-descriptor-input/output-port*
    make-textual-file-descriptor-input-port
    make-textual-file-descriptor-input-port*
    make-textual-file-descriptor-output-port
    make-textual-file-descriptor-output-port*
    make-textual-file-descriptor-input/output-port
    make-textual-file-descriptor-input/output-port*
    port-fd

* Added  experimental boot image  for 64-bit  platforms, generated  on a
  32-bit machine.  Hope it works.


Notes for revision 0.2d2
------------------------

* Tarballs extracted from GitHub's  "extract tagged revision" feature do
  not work because of missing files,  so this project is back on relying
  only  on  full repository  checkouts  and  release  tarballs from  the
  download area.

* The  default   list  of  library   file  extensions  now   holds  just
  ".vicare.sls" and ".sls"; the new option --more-file-extensions allows
  to restore  the old  behaviour of searching  for many  file extensions
  plus the "main" file trick.

* Some documentation has been written; other reviewed.

* More code reviewed with support for optional arguments validation.

* Updated  functions to  properly rely  on I/O  port's own  buffer mode;
  DISPLAY, WRITE, NEWLINE do not force a flush anymore.

* Added  SET-PORT-BUFFER-MODE! to  reconfigure the  mode of  an existing
  port.


Notes for revision 0.2d1
------------------------

* It  appears that  Ikarus' mailing  list is  working no  more,  so this
  project  now   has  its  own   mailing  list  for   announcements  and
  discussions:

	     <http://groups.google.com/group/vicare-users>

* Added library (vicare) exporting the same bindings of (ikarus).

* Review of bytevector functions.

* Introduced  the configuration  option "--disable-arguments-validation"
  to exclude  at expansion-time code validating  arguments to functions.
  At present only a few modules support this feature.

* Review  of command line  options and  execution modes.   Added options
  "--print-assembly"  and "--print-optimizer",  at present  neither very
  useful, nor human-friendly.


### end of file
# Local Variables:
# mode: text
# fill-column: 72
# paragraph-start: "*"
# End:
