;;; -*- coding: utf-8-unix -*-
;;;
;;;Part of: Vicare
;;;Contents: utility functions for fixed-size words
;;;Date: Sun Oct 23, 2011
;;;
;;;Abstract
;;;
;;;	This library is both  installed and used when expanding Vicare's
;;;	own source code.  For this  reason it must export only: bindings
;;;	imported  by Vicare itself,  syntaxes whose  expansion reference
;;;	only bindings imported by Vicare itself.
;;;
;;;Copyright (C) 2011, 2012 Marco Maggi <marco.maggi-ipsu@poste.it>
;;;
;;;This program is free software:  you can redistribute it and/or modify
;;;it under the terms of the  GNU General Public License as published by
;;;the Free Software Foundation, either version 3 of the License, or (at
;;;your option) any later version.
;;;
;;;This program is  distributed in the hope that it  will be useful, but
;;;WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
;;;MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
;;;General Public License for more details.
;;;
;;;You should  have received  a copy of  the GNU General  Public License
;;;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;


#!r6rs
(library (vicare words)
  (export

    ;; sizes
    SIZEOF_CHAR
    SIZEOF_SHORT	SIZEOF_INT
    SIZEOF_LONG		SIZEOF_LONG_LONG
    SIZEOF_SIZE_T	SIZEOF_SSIZE_T
    SIZEOF_OFF_T	SIZEOF_PTRDIFF_T
    SIZEOF_FLOAT	SIZEOF_DOUBLE
    SIZEOF_POINTER

    ;; predicates
    word?
    word-u8?		word-s8?
    word-u16?		word-s16?
    word-u32?		word-s32?
    word-u64?		word-s64?
    word-u128?		word-s128?
    word-u256?		word-s256?
    machine-word?

    unsigned-char?	signed-char?
    unsigned-short?	signed-short?
    unsigned-int?	signed-int?
    unsigned-long?	signed-long?
    unsigned-long-long?	signed-long-long?
    pointer-integer?

    size_t?		ssize_t?
    off_t?		ptrdiff_t?

    ;; inclusive limits
    greatest-u8		least-u8
    greatest-s8		least-s8
    greatest-u16	least-u16
    greatest-s16	least-s16
    greatest-u32	least-u32
    greatest-s32	least-s32
    greatest-u64	least-u64
    greatest-s64	least-s64
    greatest-u128	least-u128
    greatest-s128	least-s128
    greatest-u256	least-u256
    greatest-s256	least-s256
    greatest-machine-word
    least-machine-word

    greatest-c-unsigned-char		greatest-c-signed-char
    least-c-unsigned-char		least-c-signed-char
    greatest-c-unsigned-short		greatest-c-signed-short
    least-c-unsigned-short		least-c-signed-short
    greatest-c-unsigned-int		greatest-c-signed-int
    least-c-unsigned-int		least-c-signed-int
    greatest-c-unsigned-long		greatest-c-signed-long
    least-c-unsigned-long		least-c-signed-long
    greatest-c-unsigned-long-long	greatest-c-signed-long-long
    least-c-unsigned-long-long		least-c-signed-long-long

    greatest-c-pointer			least-c-pointer

    greatest-c-size_t			least-c-size_t
    greatest-c-ssize_t			least-c-ssize_t
    greatest-c-off_t			least-c-off_t
    greatest-c-ptrdiff_t		least-c-ptrdiff_t

    ;; exclusive limits
    greatest-u8*	least-u8*
    greatest-s8*	least-s8*
    greatest-u16*	least-u16*
    greatest-s16*	least-s16*
    greatest-u32*	least-u32*
    greatest-s32*	least-s32*
    greatest-u64*	least-u64*
    greatest-s64*	least-s64*
    greatest-u128*	least-u128*
    greatest-s128*	least-s128*
    greatest-u256*	least-u256*
    greatest-s256*	least-s256*
    greatest-machine-word*
    least-machine-word*

    greatest-c-unsigned-char*		greatest-c-signed-char*
    least-c-unsigned-char*		least-c-signed-char*
    greatest-c-unsigned-short*		greatest-c-signed-short*
    least-c-unsigned-short*		least-c-signed-short*
    greatest-c-unsigned-int*		greatest-c-signed-int*
    least-c-unsigned-int*		least-c-signed-int*
    greatest-c-unsigned-long*		greatest-c-signed-long*
    least-c-unsigned-long*		least-c-signed-long*
    greatest-c-unsigned-long-long*	greatest-c-signed-long-long*
    least-c-unsigned-long-long*		least-c-signed-long-long*

    greatest-c-pointer*			least-c-pointer*

    greatest-c-size_t*			least-c-size_t*
    greatest-c-ssize_t*			least-c-ssize_t*
    greatest-c-off_t*			least-c-off_t*
    greatest-c-ptrdiff_t*		least-c-ptrdiff_t*

    ;; fixnum alignment
    fixnum-aligned-to-2?
    fixnum-aligned-to-4?
    fixnum-aligned-to-8?
    fixnum-aligned-to?)
  (import (ikarus)
    (ikarus system $fx)
    (ikarus system $bignums)
    (only (vicare syntactic-extensions)
	  define-inline
	  define-inline-constant
	  case-word-size))


;;;; helpers

(define-syntax case-data-size
  (syntax-rules ()
    ((case-data-size 1
       ((1)	. ?body-1)
       ((2)	. ?body-2)
       ((4)	. ?body-4)
       ((8)	. ?body-8))
     (begin . ?body-1))
    ((case-data-size 2
       ((1)	. ?body-1)
       ((2)	. ?body-2)
       ((4)	. ?body-4)
       ((8)	. ?body-8))
     (begin . ?body-2))
    ((case-data-size 4
       ((1)	. ?body-1)
       ((2)	. ?body-2)
       ((4)	. ?body-4)
       ((8)	. ?body-8))
     (begin . ?body-4))
    ((case-data-size 8
       ((1)	. ?body-1)
       ((2)	. ?body-2)
       ((4)	. ?body-4)
       ((8)	. ?body-8))
     (begin . ?body-8))))


;;;; constants

(define-inline-constant U8MAX		255)
(define-inline-constant U8MIN		0)
(define-inline-constant S8MAX		+127)
(define-inline-constant S8MIN		-128)

(define-inline-constant U16MAX		65535)		#;(- (expt 2 16) 1)
(define-inline-constant U16MIN		0)
(define-inline-constant S16MAX		+32767)		#;(- (expt 2 15) 1)
(define-inline-constant S16MIN		-32768)		#;(- (expt 2 15))

(define-inline-constant U32MAX		4294967295)	#;(- (expt 2 32) 1)
(define-inline-constant U32MIN		0)
(define-inline-constant S32MAX		+2147483647)	#;(- (expt 2 31) 1)
(define-inline-constant S32MIN		-2147483648)	#;(- (expt 2 31))

(define-inline-constant U64MAX		18446744073709551615)	#;(- (expt 2 64) 1)
(define-inline-constant U64MIN		0)
(define-inline-constant S64MAX		+9223372036854775807)	#;(- (expt 2 63) 1)
(define-inline-constant S64MIN		-9223372036854775808)	#;(- (expt 2 63))

(define-inline-constant U128MAX
  340282366920938463463374607431768211455) #;(- (expt 2 128) 1)
(define-inline-constant U128MIN
  0)
(define-inline-constant S128MAX
  170141183460469231731687303715884105727) #;(- (expt 2 127) 1)
(define-inline-constant S128MIN
  -170141183460469231731687303715884105728) #;(- (expt 2 127))

(define-inline-constant U256MAX
  #;(- (expt 2 256) 1)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)
(define-inline-constant U256MIN
  0)
(define-inline-constant S256MAX
  #;(- (expt 2 255) 1)
  57896044618658097711785492504343953926634992332820282019728792003956564819967)
(define-inline-constant S256MIN
  #;(- (expt 2 255))
  -57896044618658097711785492504343953926634992332820282019728792003956564819968)

;;; --------------------------------------------------------------------

(define-inline-constant U8MAX*		256)
(define-inline-constant U8MIN*		-1)
(define-inline-constant S8MAX*		+128)
(define-inline-constant S8MIN*		-129)

(define-inline-constant U16MAX*		65536)
(define-inline-constant U16MIN*		-1)
(define-inline-constant S16MAX*		+32768)
(define-inline-constant S16MIN*		-32769)

(define-inline-constant U32MAX*		4294967296)
(define-inline-constant U32MIN*		-1)
(define-inline-constant S32MAX*		+2147483648)
(define-inline-constant S32MIN*		-2147483649)

(define-inline-constant U64MAX*		18446744073709551616)
(define-inline-constant U64MIN*		-1)
(define-inline-constant S64MAX*		+9223372036854775808)
(define-inline-constant S64MIN*		-9223372036854775809)

(define-inline-constant U128MAX*	340282366920938463463374607431768211456)
(define-inline-constant U128MIN*	-1)
(define-inline-constant S128MAX*	170141183460469231731687303715884105728)
(define-inline-constant S128MIN*	-170141183460469231731687303715884105729)

(define-inline-constant U256MAX*
  115792089237316195423570985008687907853269984665640564039457584007913129639936)
(define-inline-constant U256MIN*
  -1)
(define-inline-constant S256MAX*
  57896044618658097711785492504343953926634992332820282019728792003956564819968)
(define-inline-constant S256MIN*
  -57896044618658097711785492504343953926634992332820282019728792003956564819969)

;;; --------------------------------------------------------------------

(define-inline-constant SIZEOF_CHAR		@SIZEOF_CHAR@)
(define-inline-constant SIZEOF_SHORT		@SIZEOF_SHORT@)
(define-inline-constant SIZEOF_INT		@SIZEOF_INT@)
(define-inline-constant SIZEOF_LONG		@SIZEOF_LONG@)
(define-inline-constant SIZEOF_LONG_LONG	@SIZEOF_LONG_LONG@)
(define-inline-constant SIZEOF_SIZE_T		@SIZEOF_SIZE_T@)
(define-inline-constant SIZEOF_SSIZE_T		@SIZEOF_SSIZE_T@)
(define-inline-constant SIZEOF_OFF_T		@SIZEOF_OFF_T@)
(define-inline-constant SIZEOF_PTRDIFF_T	@SIZEOF_PTRDIFF_T@)
(define-inline-constant SIZEOF_FLOAT		4)
(define-inline-constant SIZEOF_DOUBLE		8)
(define-inline-constant SIZEOF_POINTER		@VICARE_SIZE_OF_VOIDP@)

;;; --------------------------------------------------------------------

(define-inline-constant SCHAR_MIN		@VALUEOF_SCHAR_MIN@)
(define-inline-constant SCHAR_MAX		@VALUEOF_SCHAR_MAX@)
(define-inline-constant UCHAR_MAX		@VALUEOF_UCHAR_MAX@)
(define-inline-constant CHAR_MIN		@VALUEOF_CHAR_MIN@)
(define-inline-constant CHAR_MAX		@VALUEOF_CHAR_MAX@)
(define-inline-constant SHRT_MIN		@VALUEOF_SHRT_MIN@)
(define-inline-constant SHRT_MAX		@VALUEOF_SHRT_MAX@)
(define-inline-constant USHRT_MAX		@VALUEOF_USHRT_MAX@)
(define-inline-constant INT_MIN			@VALUEOF_INT_MIN@)
(define-inline-constant INT_MAX			@VALUEOF_INT_MAX@)
(define-inline-constant UINT_MAX		@VALUEOF_UINT_MAX@)
(define-inline-constant LONG_MIN		@VALUEOF_LONG_MIN@)
(define-inline-constant LONG_MAX		@VALUEOF_LONG_MAX@)
(define-inline-constant ULONG_MAX		@VALUEOF_ULONG_MAX@)
;; If the "long  long" constants are undefined, assume  that "long long"
;; is a 64-bit integer.
(define-inline-constant LONG_LONG_MIN		(or @VALUEOF_LONG_LONG_MIN@
						    ;; (- (expt 2 63))
						    -9223372036854775808))
(define-inline-constant LONG_LONG_MAX		(or @VALUEOF_LONG_LONG_MAX@
						    ;; (- (expt 2 63) 1)
						    +9223372036854775807))
(define-inline-constant ULONG_LONG_MAX		(or @VALUEOF_ULONG_LONG_MAX@
						    ;; (- (expt 2 64) 1)
						    18446744073709551615))
(define-inline-constant WCHAR_MAX		@VALUEOF_WCHAR_MAX@)

;;; --------------------------------------------------------------------

(define-syntax SIZE_T_MAX
  (if (= 4 @SIZEOF_SIZE_T@)
      (identifier-syntax U32MAX)
    (identifier-syntax U64MAX)))

(define-inline-constant SIZE_T_MIN	0)

(define-syntax SSIZE_T_MAX
  (if (= 4 @SIZEOF_SSIZE_T@)
      (identifier-syntax S32MAX)
    (identifier-syntax S64MAX)))

(define-syntax SSIZE_T_MIN
  (if (= 4 @SIZEOF_SSIZE_T@)
      (identifier-syntax S32MIN)
    (identifier-syntax S64MIN)))

(define-syntax OFF_T_MAX
  (if (= 4 @SIZEOF_OFF_T@)
      (identifier-syntax S32MAX)
    (identifier-syntax S64MAX)))

(define-syntax OFF_T_MIN
  (if (= 4 @SIZEOF_OFF_T@)
      (identifier-syntax S32MIN)
    (identifier-syntax S64MIN)))

(define-syntax PTRDIFF_T_MAX
  (if (= 4 @SIZEOF_PTRDIFF_T@)
      (identifier-syntax S32MAX)
    (identifier-syntax S64MAX)))

(define-syntax PTRDIFF_T_MIN
  (if (= 4 @SIZEOF_PTRDIFF_T@)
      (identifier-syntax S32MIN)
    (identifier-syntax S64MIN)))


(define-inline (%bnbncmp X Y fxcmp)
  (fxcmp (foreign-call "ikrt_bnbncomp" X Y) 0))

(define-inline ($bnbn= X Y)
  (%bnbncmp X Y $fx=))

(define-inline ($bnbn< X Y)
  (%bnbncmp X Y $fx<))

(define-inline ($bnbn> X Y)
  (%bnbncmp X Y $fx>))

(define-inline ($bnbn<= X Y)
  (%bnbncmp X Y $fx<=))

(define-inline ($bnbn>= X Y)
  (%bnbncmp X Y $fx>=))


;;;; limits

(define-inline (greatest-u8)		U8MAX)
(define-inline (greatest-s8)		S8MAX)
(define-inline (least-u8)		U8MIN)
(define-inline (least-s8)		S8MIN)

(define-inline (greatest-u16)		U16MAX)
(define-inline (greatest-s16)		S16MAX)
(define-inline (least-u16)		U16MIN)
(define-inline (least-s16)		S16MIN)

(define-inline (greatest-u32)		U32MAX)
(define-inline (greatest-s32)		S32MAX)
(define-inline (least-u32)		U32MIN)
(define-inline (least-s32)		S32MIN)

(define-inline (greatest-u64)		U64MAX)
(define-inline (greatest-s64)		S64MAX)
(define-inline (least-u64)		U64MIN)
(define-inline (least-s64)		S64MIN)

(define-inline (greatest-u128)		U128MAX)
(define-inline (greatest-s128)		S128MAX)
(define-inline (least-u128)		U128MIN)
(define-inline (least-s128)		S128MIN)

(define-inline (greatest-u256)		U256MAX)
(define-inline (greatest-s256)		S256MAX)
(define-inline (least-u256)		U256MIN)
(define-inline (least-s256)		S256MIN)

;;; --------------------------------------------------------------------

(define-inline (greatest-machine-word)
  (case-word-size
   ((32)	(greatest-u32))
   ((64)	(greatest-u64))))

(define-inline (least-machine-word)
  (case-word-size
   ((32)	(least-u32))
   ((64)	(least-u64))))

;;; --------------------------------------------------------------------

(define-inline (greatest-c-unsigned-char)	UCHAR_MAX)
(define-inline (greatest-c-signed-char)		CHAR_MAX)
(define-inline (least-c-unsigned-char)		0)
(define-inline (least-c-signed-char)		CHAR_MIN)

(define-inline (greatest-c-unsigned-short)	USHRT_MAX)
(define-inline (greatest-c-signed-short)	SHRT_MAX)
(define-inline (least-c-unsigned-short)		0)
(define-inline (least-c-signed-short)		SHRT_MIN)

(define-inline (greatest-c-unsigned-int)	UINT_MAX)
(define-inline (greatest-c-signed-int)		INT_MAX)
(define-inline (least-c-unsigned-int)		0)
(define-inline (least-c-signed-int)		INT_MIN)

(define-inline (greatest-c-unsigned-long)	ULONG_MAX)
(define-inline (greatest-c-signed-long)		LONG_MAX)
(define-inline (least-c-unsigned-long)		0)
(define-inline (least-c-signed-long)		LONG_MIN)

(define-inline (greatest-c-unsigned-long-long)	ULONG_LONG_MAX)
(define-inline (greatest-c-signed-long-long)	LONG_LONG_MAX)
(define-inline (least-c-unsigned-long-long)	0)
(define-inline (least-c-signed-long-long)	LONG_LONG_MIN)

(define-inline (greatest-c-pointer)
  (case-word-size
   ((32)	U32MAX)
   ((64)	U64MAX)))

(define-inline (least-c-pointer)
  0)

(define-inline (greatest-c-size_t)		SIZE_T_MAX)
(define-inline (greatest-c-ssize_t)		SSIZE_T_MAX)
(define-inline (least-c-size_t)			0)
(define-inline (least-c-ssize_t)		SSIZE_T_MIN)
(define-inline (greatest-c-off_t)		OFF_T_MAX)
(define-inline (least-c-off_t)			OFF_T_MIN)
(define-inline (greatest-c-ptrdiff_t)		PTRDIFF_T_MAX)
(define-inline (least-c-ptrdiff_t)		PTRDIFF_T_MIN)

;;; --------------------------------------------------------------------

(define-inline (greatest-u8*)		U8MAX*)
(define-inline (greatest-s8*)		S8MAX*)
(define-inline (least-u8*)		U8MIN*)
(define-inline (least-s8*)		S8MIN*)

(define-inline (greatest-u16*)		U16MAX*)
(define-inline (greatest-s16*)		S16MAX*)
(define-inline (least-u16*)		U16MIN*)
(define-inline (least-s16*)		S16MIN*)

(define-inline (greatest-u32*)		U32MAX*)
(define-inline (greatest-s32*)		S32MAX*)
(define-inline (least-u32*)		U32MIN*)
(define-inline (least-s32*)		S32MIN*)

(define-inline (greatest-u64*)		U64MAX*)
(define-inline (greatest-s64*)		S64MAX*)
(define-inline (least-u64*)		U64MIN*)
(define-inline (least-s64*)		S64MIN*)

(define-inline (greatest-u128*)		U128MAX*)
(define-inline (greatest-s128*)		S128MAX*)
(define-inline (least-u128*)		U128MIN*)
(define-inline (least-s128*)		S128MIN*)

(define-inline (greatest-u256*)		U256MAX*)
(define-inline (greatest-s256*)		S256MAX*)
(define-inline (least-u256*)		U256MIN*)
(define-inline (least-s256*)		S256MIN*)

;;; --------------------------------------------------------------------

(define-inline (greatest-machine-word*)
  (case-word-size
   ((32)	(greatest-u32*))
   ((64)	(greatest-u64*))))

(define-inline (least-machine-word*)
  (case-word-size
   ((32)	(least-u32*))
   ((64)	(least-u64*))))

;;; --------------------------------------------------------------------

(define-inline (greatest-c-unsigned-char*)	(+ (greatest-c-unsigned-char) 1))
(define-inline (greatest-c-signed-char*)	(+ (greatest-c-signed-char) 1))
(define-inline (least-c-unsigned-char*)		(- (least-c-unsigned-char) 1))
(define-inline (least-c-signed-char*)		(- (least-c-signed-char) 1))

(define-inline (greatest-c-unsigned-short*)	(+ (greatest-c-unsigned-short) 1))
(define-inline (greatest-c-signed-short*)	(+ (greatest-c-signed-short) 1))
(define-inline (least-c-unsigned-short*)	(- (least-c-unsigned-short) 1))
(define-inline (least-c-signed-short*)		(- (least-c-signed-short) 1))

(define-inline (greatest-c-unsigned-int*)	(+ (greatest-c-unsigned-int) 1))
(define-inline (greatest-c-signed-int*)		(+ (greatest-c-signed-int) 1))
(define-inline (least-c-unsigned-int*)		(- (least-c-unsigned-int) 1))
(define-inline (least-c-signed-int*)		(- (least-c-signed-int) 1))

(define-inline (greatest-c-unsigned-long*)	(+ (greatest-c-unsigned-long) 1))
(define-inline (greatest-c-signed-long*)	(+ (greatest-c-signed-long) 1))
(define-inline (least-c-unsigned-long*)		(- (least-c-unsigned-long) 1))
(define-inline (least-c-signed-long*)		(- (least-c-signed-long) 1))

(define-inline (greatest-c-unsigned-long-long*)	(+ (greatest-c-unsigned-long-long) 1))
(define-inline (greatest-c-signed-long-long*)	(+ (greatest-c-signed-long-long) 1))
(define-inline (least-c-unsigned-long-long*)	(- (least-c-unsigned-long-long) 1))
(define-inline (least-c-signed-long-long*)	(- (least-c-signed-long-long) 1))

(define-inline (greatest-c-pointer*)
  (case-word-size
   ((32)	U32MAX*)
   ((64)	U64MAX*)))

(define-inline (least-c-pointer*)
  (case-word-size
   ((32)	U32MIN*)
   ((64)	U64MIN*)))

(define-inline (greatest-c-size_t*)		(+ SIZE_T_MAX 1))
(define-inline (least-c-size_t*)		-1)

(define-inline (greatest-c-ssize_t*)		(+ SSIZE_T_MAX 1))
(define-inline (least-c-ssize_t*)		(- SSIZE_T_MIN 1))

(define-inline (greatest-c-off_t*)		(+ OFF_T_MAX 1))
(define-inline (least-c-off_t*)			(- OFF_T_MIN 1))

(define-inline (greatest-c-ptrdiff_t*)		(+ PTRDIFF_T_MAX 1))
(define-inline (least-c-ptrdiff_t*)		(- PTRDIFF_T_MIN 1))


;;;; bit-sized word predicates

(define-inline (word? N)
  (or (fixnum? N) (bignum? N)))

(define-inline (machine-word? N)
  (case-word-size
   ((32) (word-u32? N))
   ((64) (word-u64? N))))

;;; --------------------------------------------------------------------

(define-inline (word-u8? N)
  (and (fixnum? N)
       ($fx>= N U8MIN)
       ($fx<= N U8MAX)))

(define-inline (word-s8? N)
  (and (fixnum? N)
       ($fx>= N S8MIN)
       ($fx<= N S8MAX)))

;;; --------------------------------------------------------------------

(define-inline (word-u16? N)
  (and (fixnum? N)
       ($fx>= N 0)
       ($fx<= N U16MAX)))

(define-inline (word-s16? N)
  (and (fixnum? N)
       ($fx>= N S16MIN)
       ($fx<= N S16MAX)))

;;; --------------------------------------------------------------------

(define-inline (word-u32? N)
  (case-word-size
   ((32) (if (fixnum? N)
	     ($fx<= 0 N)
	   (and (bignum? N)
		($bignum-positive? N)
		($bnbn<= N U32MAX))))
   ((64) (and (fixnum? N)
	      ($fx>= N 0)
	      ($fx<= N U32MAX)))))

(define-inline (word-s32? N)
  (case-word-size
   ((32) (or (fixnum? N)
	     (and (bignum? N)
		  ($bnbn>= N S32MIN)
		  ($bnbn<= N S32MAX))))
   ((64) (and (fixnum? N)
	      ($fx>= N S32MIN)
	      ($fx<= N S32MAX)))))

;;; --------------------------------------------------------------------

(define-inline (word-u64? N)
  (if (fixnum? N)
      ($fx<= 0 N)
    (and (bignum? N)
	 ($bignum-positive? N)
	 ($bnbn<= N U64MAX))))

(define-inline (word-s64? N)
  (or (fixnum? N)
      (and (bignum? N)
	   ($bnbn>= N S64MIN)
	   ($bnbn<= N S64MAX))))

;;; --------------------------------------------------------------------

(define-inline (word-u128? N)
  (if (fixnum? N)
      ($fx<= 0 N)
    (and (bignum? N)
	 ($bignum-positive? N)
	 ($bnbn<= N U128MAX))))

(define-inline (word-s128? N)
  (or (fixnum? N)
      (and (bignum? N)
	   ($bnbn>= N S128MIN)
	   ($bnbn<= N S128MAX))))

;;; --------------------------------------------------------------------

(define-inline (word-u256? N)
  (if (fixnum? N)
      ($fx<= 0 N)
    (and (bignum? N)
	 ($bignum-positive? N)
	 ($bnbn<= N U256MAX))))

(define-inline (word-s256? N)
  (or (fixnum? N)
      (and (bignum? N)
	   ($bnbn>= N S256MIN)
	   ($bnbn<= N S256MAX))))


;;;; C language data predicates

(define-syntax signed (syntax-rules ()))
(define-syntax unsigned (syntax-rules ()))
(let-syntax ((define-predicate (syntax-rules (signed unsigned)
				 ((_ ?who ?data-size unsigned)
				  (define-inline (?who N)
				    (case-data-size ?data-size
				      ((1)	(word-u8?  N))
				      ((2)	(word-u16? N))
				      ((4)	(word-u32? N))
				      ((8)	(word-u64? N)))))
				 ((_ ?who ?data-size signed)
				  (define-inline (?who N)
				    (case-data-size ?data-size
				      ((1)	(word-s8?  N))
				      ((2)	(word-s16? N))
				      ((4)	(word-s32? N))
				      ((8)	(word-s64? N))))))))

  (define-predicate unsigned-char?		@SIZEOF_CHAR@		unsigned)
  (define-predicate unsigned-short?		@SIZEOF_SHORT@		unsigned)
  (define-predicate unsigned-int?		@SIZEOF_INT@		unsigned)
  (define-predicate unsigned-long?		@SIZEOF_LONG@		unsigned)
  (define-predicate unsigned-long-long?		@SIZEOF_LONG_LONG@	unsigned)
  (define-predicate signed-char?		@SIZEOF_CHAR@		signed)
  (define-predicate signed-short?		@SIZEOF_SHORT@		signed)
  (define-predicate signed-int?			@SIZEOF_INT@		signed)
  (define-predicate signed-long?		@SIZEOF_LONG@		signed)
  (define-predicate signed-long-long?		@SIZEOF_LONG_LONG@	signed)

  (define-predicate pointer-integer?		@VICARE_SIZE_OF_VOIDP@	unsigned)

  (define-predicate size_t?			@SIZEOF_SIZE_T@		unsigned)
  (define-predicate ssize_t?			@SIZEOF_SSIZE_T@	signed)
  (define-predicate off_t?			@SIZEOF_OFF_T@		signed)
  (define-predicate ptrdiff_t?			@SIZEOF_PTRDIFF_T@	signed)
  )


;;;; vector index alignment
;;
;;* If an index  is a multiple of 2 its least  significant bit is set to
;;zero:
;;
;;   (number->string  2 2)	=>     "10"
;;   (number->string  4 2)	=>    "100"
;;   (number->string  6 2)	=>    "110"
;;   (number->string  8 2)	=>   "1000"
;;   (number->string 10 2)	=>   "1010"
;;       ...
;;
;;so to test if an index is aligned to a multiple of 2 we just do:
;;
;;   ($fxzero? ($fxlogand index #b1))
;;
;;* If an index is a multiple  of 4 its least significant 2 bits are set
;;to zero:
;;
;;   (number->string  4 2)	=>    "100"
;;   (number->string  8 2)	=>   "1000"
;;   (number->string 12 2)	=>   "1100"
;;   (number->string 16 2)	=>  "10000"
;;       ...
;;
;;so to test if an index is aligned to a multiple of 4 we just do:
;;
;;   ($fxzero? ($fxlogand index #b11))
;;
;;* If an index is a multiple  of 8 its least significant 3 bits are set
;;to zero:
;;
;;   (number->string  8 2)	=>   "1000"
;;   (number->string 16 2)	=>  "10000"
;;   (number->string 24 2)	=>  "11000"
;;   (number->string 32 2)	=> "100000"
;;       ...
;;
;;so to test if an index is aligned to a multiple of 8 we just do:
;;
;;   ($fxzero? ($fxlogand index #b111))
;;
;;Notice that:
;;
;;   sizeof(float)	=> 4
;;   sizeof(double)	=> 8
;;

(define-inline (fixnum-aligned-to-2? N)
  ($fxzero? ($fxlogand #b1 N)))

(define-inline (fixnum-aligned-to-4? N)
  ($fxzero? ($fxlogand #b11 N)))

(define-inline (fixnum-aligned-to-8? N)
  ($fxzero? ($fxlogand #b111 N)))

(define-inline (fixnum-aligned-to? N alignment)
  ($fxzero? (fxmod N alignment)))


;;;; done

)

;;; end of file
;; Local Variables:
;; eval: (put 'case-data-size 'scheme-indent-function 1)
;; End:
