@node srfi vectors
@section @ansrfi{43} vector library


@cindex @ansrfi{43} vector library


The library @library{srfi :43} is by Taylor Campbell as the reference
implementation for @ansrfi{43}; see:

@center @url{http://srfi.schemers.org/srfi-43/srfi-43.html}

@noindent
for more details.

@menu
* srfi vector license::    Original document license.
* srfi vector abstract::   Abstract.
* srfi vector rationale::  Rationale.
* srfi vector spec::       Specification.
* srfi vector ack::        Acknowledgements.
* srfi vector references:: References.
@end menu

@c page
@node srfi vector license
@subsection Original document license


Copyright @copyright{} 2003 Taylor Campbell.  All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

@c page
@node srfi vector abstract
@subsection Abstract


This @srfi{} proposes a comprehensive and complete library of vector
operations accompanied by a freely available and complete reference
implementation.  The reference implementation is unencumbered by
copyright, and useable with no modifications on any Scheme system that
is @rnrs{5}--compliant.  It also provides several hooks for
implementation-specific optimization as well.

Because this @srfi{} is more of a library or module specification than a
request for additions to readers or any other internal implementation
detail, in an implementation that supports a module or structure or
package or library or unit (et cetera) systems, these procedures should
be contained in a module/structure/package/library/unit called
@code{vector-lib}.

@c page
@node srfi vector rationale
@subsection Rationale


@rnrs{5} provides very few list--processing procedures, for which reason
@ansrfi{1} exists.  However, @rnrs{5} provides even fewer vector
operations; while it provides mapping, appending, et cetera operations
for lists, it specifies only nine vector manipulation operations:

@example
vector?         make-vector     vector
vector-length   vector-ref      vector-set!
vector->list    list->vector    vector-fill!
@end example

Many Scheme implementations provide several vector operations beyond the
minuscule set that @rnrs{5} defines (the typical @func{vector-append},
@func{vector-map}, et cetera), but often these procedures have different
names, take arguments in different orders, don't take the same number of
arguments, or have some other flaw that makes them unportable.  For this
reason, this @srfi{} is proposed.

It should be noted that no vector sorting procedures are provided by
this @srfi{}, because there already is a @srfi{} for such a purpose,
@ansrfi{32}, which includes routines for sorting not only vectors but also
lists.

@c page
@node srfi vector spec
@subsection Specification


@menu
* srfi vector spec intro::      Introduction.
* srfi vector spec cons::       Constructors.
* srfi vector spec pred::       Predicates.
* srfi vector spec select::     Selectors.
* srfi vector spec iter::       Iteration.
* srfi vector spec search::     Searching.
* srfi vector spec mutators::   Mutators.
* srfi vector spec conv::       Conversion.
@end menu

@c page
@node srfi vector spec intro
@subsubsection Introduction


In this section containing specifications of procedures, the following
notation is used to specify parameters and return values:

@table @code
@item (f arg1 arg2 иии) -> something
Indicates a function @var{f} takes the parameters @var{arg1},
@var{arg2}, @dots{} and returns a value of the type @var{something}. If
@var{something} is unspecified, then what @var{f} returns is
implementation--dependant; this @srfi{} does not specify what it
returns, and in order to write portable code, the return value should be
ignored.

@item vec
The argument in this place must be a vector, i.e. it must satisfy the
predicate @func{vector?}.

@item i, j, start, size
The argument in this place must be a nonnegative integer, i.e. it must
satisfy the predicates @func{integer?} and either @func{zero?} or
@func{positive?}.  The third case of it indicates the index at which
traversal begins; the fourth case of it indicates the size of a vector.

@item end
The argument in this place must be a positive integer, i.e. it must
satisfy the predicates @func{integer?} and @func{positive?}.  This
indicates the index directly before which traversal will stop;
processing will occur until the the index of the vector is end.  It is
the closed right side of a range.

@item f
The argument in this place must be a function of one or more arguments,
returning exactly one value.

@item pred?
The argument in this place must be a function of one or more arguments
that returns one value, which is treated as a boolean.

@item x, y, z, seed, knil, fill, key, value
The argument in this place may be any Scheme value.

@item [something]
Indicates that @var{something} is an optional argument; it needn't
necessarily be applied.  Something needn't necessarily be one thing; for
example, this usage of it is perfectly valid:

@example
[start [end]]
@end example

@noindent
and is indeed used quite often.

@item something иии
Indicates that zero or more somethings are allowed to be arguments.

@item something1 something2 иии
Indicates that at least one something must be arguments.

@item something1 something2 иии somethingn
Exactly equivalent to the previous argument notation, but this also
indicates that @var{n} will be used later in the procedure description.
@end table

It should be noted that all of the procedures that iterate across
multiple vectors in parallel stop iterating and produce the final result
when the end of the shortest vector is reached.  The sole exception is
@func{vector=}, which automatically returns @false{} if the vectors'
lengths vary.

@c page
@node srfi vector spec cons
@subsubsection Constructors


@defun make-vector @var{size} [@var{fill}] -> vector
@rnrs{5} Create and return a vector of size @var{size}, optionally
filling it with @var{fill}.  The default value of @var{fill} is
unspecified.

Example:

@example
(make-vector 5 3)
=> #(3 3 3 3 3)
@end example
@end defun


@defun vector @var{x} ... -> vector
@rnrs{5} Create and return a vector whose elements are @var{x} ...

Example:

@example
(vector 0 1 2 3 4)
=> #(0 1 2 3 4)
@end example
@end defun


@defun vector-unfold @var{f} @var{length} @var{initial-seed} ... -> vector
The fundamental vector constructor.  Create a vector whose length is
@var{length} and iterates across each index @var{k} between 0 and
@var{length}, applying @var{f} at each iteration to the current index
and current seeds, in that order, to receive @code{@var{n} + 1} values:
first, the element to put in the @var{k}-th slot of the new vector and
@var{n} new seeds for the next iteration.  It is an error for the number
of seeds to vary between iterations.

Examples:

@example
(vector-unfold (lambda (i x)
                 (values x (- x 1)))
               10 0)
=> #(0 -1 -2 -3 -4 -5 -6 -7 -8 -8)

;; construct a vector of the sequence of integers
;; in the range [0,n)
(vector-unfold values n)
=> #(0 1 2 иии n-2 n-1)

;; copy a vector
(vector-unfold (lambda (i)
                 (vector-ref vector i))
               (vector-length vector))
@end example
@end defun


@defun vector-unfold-right @var{f} @var{length} @var{initial-seed} ... -> vector
Like @func{vector-unfold}, but it uses @var{f} to generate elements from
right--to--left, rather than left--to--right.

Examples:

@example
;; Construct a vector in reverse of the integers
;; in the range [0,n).
(vector-unfold-right (lambda (i x)
                       (values x (+ x 1)))
                     n 0)
=> #(n-1 n-2 иии 2 1 0)

;; Reverse vector.
(vector-unfold-right (lambda (i x)
                       (values (vector-ref vector x) (+ x 1)))
                     (vector-length vector)
                     0)
@end example
@end defun


@defun vector-copy @var{vec} [@var{start} [@var{end} [@var{fill}]]] -> vector
Allocate a new vector whose length is @code{@var{end} - @var{start}} and
fills it with elements from @var{vec}, taking elements from @var{vec}
starting at index @var{start} and stopping at index @var{end}.

@var{start} defaults to 0 and @var{end} defaults to the value of
@code{(vector-length @var{vec})}.

If @var{end} extends beyond the length of @var{vec}, the slots in the
new vector that obviously cannot be filled by elements from @var{vec}
are filled with @var{fill}, whose default value is unspecified.

Examples:

@example
(vector-copy '#(a b c d e f g h i))
=> #(a b c d e f g h i)

(vector-copy '#(a b c d e f g h i) 6)
=> #(g h i)

(vector-copy '#(a b c d e f g h i) 3 6)
=> #(d e f)

(vector-copy '#(a b c d e f g h i) 6 12 'x)
=> #(g h i x x x)
@end example
@end defun


@defun vector-reverse-copy @var{vec} [@var{start} [@var{end}]] -> vector
Like @func{vector-copy}, but it copies the elements in the reverse order
from @var{vec}.

Example:

@example
(vector-reverse-copy '#(5 4 3 2 1 0) 1 5)
=> #(1 2 3 4)
@end example
@end defun


@defun vector-append @var{vec} ... -> vector
Returns a newly allocated vector that contains all elements in order
from the subsequent locations in @var{vec} ...

Examples:

@example
(vector-append '#(x) '#(y))
=> #(x y)

(vector-append '#(a) '#(b c d))
=> #(a b c d)

(vector-append '#(a #(b)) '#(#(c)))
=> #(a #(b) #(c))
@end example
@end defun


@defun vector-concatenate @var{list-of-vectors} -> vector
Appends each vector in @var{list-of-vectors}.  This is equivalent to:

@example
(apply vector-append list-of-vectors)
@end example

@noindent
however, it may be implemented better.

Example:

@example
(vector-concatenate '(#(a b) #(c d)))
=> #(a b c d)
@end example
@end defun

@c page
@node srfi vector spec pred
@subsubsection Predicates


@defun vector? @var{x} -> boolean
@rnrs{5} Disjoint type predicate for vectors: return @true{} if @var{x}
is a vector, and @false{} otherwise.

Examples:

@example
(vector? '#(a b c))
=> #t

(vector? '(a b c))
=> #f

(vector? #t)
=> #f

(vector? '#())
=> #t

(vector? '())
=> #f
@end example
@end defun


@defun vector-empty? @var{vec} -> boolean
Return @true{} if @var{vec} is empty, i.e. its length is 0, otherwise
@false{}.

Examples:

@example
(vector-empty? '#(a))
=> #f

(vector-empty? '#(()))
=> #f

(vector-empty? '#(#()))
=> #f

(vector-empty? '#())
=> #t
@end example
@end defun


@defun vector= @var{elt=?} @var{vec} ... -> boolean
Vector structure comparator, generalized across user--specified element
comparators.  Vectors @var{a} and @var{b} are considered equal by
@func{vector=} if, and only if, their lengths are the same, and for each
respective elements @var{Ea} and @var{Eb}, @code{(@var{elt=?} @var{Ea}
@var{Eb})} returns a true value.

@var{elt=?} is always applied to two arguments.

Element comparison must be consistent with @func{eq?}; that is, if
@code{(eq?  @var{Ea} @var{Eb})} results in a true value, then
@code{(@var{elt=?} @var{Ea} @var{Eb})} must also result in a true value.
This may be exploited to avoid unnecessary element comparisons.  (The
reference implementation does, but it does not consider the situation
where @var{elt=?} is in fact itself @func{eq?} to avoid yet more
unnecessary comparisons.)

If there are only zero or one vector arguments, @true{} is automatically
returned.

The dynamic order in which comparisons of elements and of vectors are
performed is left completely unspecified; do not rely on a particular
order.

Examples:

@example
(vector= eq? '#(a b c d) '#(a b c d))
=> #t

(vector= eq? '#(a b c d) '#(a b d c))
=> #f

(vector= = '#(1 2 3 4 5) '#(1 2 3 4))
=> #f

(vector= = '#(1 2 3 4) '#(1 2 3 4))
=> #t
@end example

@noindent
the two trivial cases:

@example
(vector= eq?)
=> #t

(vector= eq? '#(a))
=> #t
@end example

Note the fact that we don't use vector literals in the next two; it is
unspecified whether or not literal vectors with the same external
representation are @func{eq?}:

@example
(vector= eq? (vector (vector 'a)) (vector (vector 'a)))
=> #f

(vector= equal? (vector (vector 'a)) (vector (vector 'a)))
=> #t
@end example
@end defun

@c page
@node srfi vector spec select
@subsubsection Selectors


@defun vector-ref @var{vec} @var{i} -> value
@rnrs{5} Vector element dereferencing: return the value that the
location in @var{vec} at @var{i} is mapped to in the store.  Indexing is
based on zero.  The argument @var{i} must be within the range: @code{[0,
(vector-length @var{vec}))}.

Example:

@example
(vector-ref '#(a b c d) 2)
=> c
@end example
@end defun


@defun vector-length @var{vec} -> exact nonnegative integer
@rnrs{5} Return the length of @var{vec}, the number of locations
reachable from @var{vec}.  (The careful word ``reachable'' is used to
allow for ``vector slices'', whereby @var{vec} refers to a larger vector
that contains more locations that are unreachable from @var{vec}.  This
@srfi{} does not define vector slices, but later @srfi{}s may.)

Example:

@example
(vector-length '#(a b c))
=> 3
@end example
@end defun

@c page
@node srfi vector spec iter
@subsubsection Iteration


@defun vector-fold @var{kons} @var{knil} @var{vec1} @var{vec2} ... -> value
The fundamental vector iterator.  @var{kons} is iterated over each index
in all of the vectors, stopping at the end of the shortest; @var{kons}
is applied as:

@example
(@var{kons} @var{i} @var{state}
            (vector-ref @var{vec1} @var{i})
            (vector-ref @var{vec2} @var{i})
            иии)
@end example

@noindent
where @var{state} is the current state value; the current state value
begins with @var{knil}, and becomes whatever @var{kons} returned at the
respective iteration; and @var{i} is the current index.

The iteration is strictly left--to--right.

Examples:

@example
;; Find the longest string's length in vector-of-strings.
(vector-fold (lambda (index len str)
               (max (string-length str) len))
             0 vector-of-strings)

;; Produce a list of the reversed elements of vec.
(vector-fold (lambda (index tail elt)
               (cons elt tail))
             '() vec)

;; Count the number of even numbers in vec.
(vector-fold (lambda (index counter n)
               (if (even? n) (+ counter 1) counter))
             0 vec)
@end example
@end defun


@defun vector-fold-right @var{kons} @var{knil} @var{vec1} @var{vec2} ... -> value
Similar to @func{vector-fold}, but it iterates right to left instead of
left to right.

Example:

@example
;; Convert a vector to a list.
(vector-fold-right (lambda (index tail elt)
                     (cons elt tail))
                   '() '#(a b c d))
=> (a b c d)
@end example
@end defun


@defun vector-map @var{f} @var{vec1} @var{vec2} ... -> vector
Construct a new vector of the shortest size of the vector arguments.
Each element at index @var{i} of the new vector is mapped from the old
vectors by:

@example
(@var{f} @var{i} (vector-ref @var{vec1} @var{i})
                 (vector-ref @var{vec2} @var{i})
                 иии)
@end example

The dynamic order of application of @var{f} is unspecified.

Examples:

@example
(vector-map (lambda (i x) (* x x))
              (vector-unfold (lambda (i x)
                               (values x (+ x 1)))
                             4 1))
=> #(1 4 9 16)

(vector-map (lambda (i x y) (* x y))
              (vector-unfold (lambda (i x)
                               (values x (+ x 1)))
                             5 1)
              (vector-unfold (lambda (i x)
                               (values x (- x 1)))
                             5 5))
=> #(5 8 9 8 5)

(let ([count 0])
  (vector-map (lambda (ignored-index ignored-elt)
                (set! count (+ count 1))
                count)
              '#(a b)))
=> #(1 2) OR #(2 1)

(vector-map (lambda (i elt)
              (+ i elt))
            '#(1 2 3 4))
=> #(1 3 5 7)
@end example
@end defun


@defun vector-map! @var{f} @var{vec1} @var{vec2} ... -> unspecified
Similar to @func{vector-map}, but rather than mapping the new elements
into a new vector, the new mapped elements are destructively inserted
into @var{vec1}.  The dynamic order of application of @var{f}
unspecified, so it is dangerous for @var{f} to apply either
@func{vector-ref} or @func{vector-set!} to @var{vec1} in @var{f}.
@end defun


@defun vector-for-each @var{f} @var{vec1} @var{vec2} ... -> unspecified
Simple vector iterator: apply @var{f} to each index in the range
@code{[0, @var{length})}, where @var{length} is the length of the
smallest vector argument passed, and the respective list of parallel
elements from @var{vec1}, @var{vec2}, @dots{} at that index.  In
contrast with @func{vector-map}, @var{f} is reliably applied to each
subsequent elements, starting at index 0, in the vectors.

Example:

@example
(vector-for-each (lambda (i x)
                   (display x)
                   (newline))
=> '#("foo" "bar" "baz" "quux" "zot"))
@end example

@noindent
displays:

@example
foo
bar
baz
quux
zot
@end example
@end defun


@defun vector-count @var{pred?} @var{vec1} @var{vec2} ... -> exact nonnegative integer
Count the number of parallel elements in the vectors that satisfy
@var{pred?}, which is applied, for each index @var{i} in the range
@code{[0, @var{length})}, where @var{length} is the length of the
smallest vector argument, to @var{i} and each parallel element in the
vectors at that index, in order.

Examples:

@example
(vector-count (lambda (i elt)
                (even? elt))
              '#(3 1 4 1 5 9 2 5 6))
=> 3

(vector-count (lambda (i x y)
                (< x y))
              '#(1 3 6 9)
              '#(2 4 6 8 10 12))
=> 2
@end example
@end defun

@c page
@node srfi vector spec search
@subsubsection Searching


@defun vector-index @var{pred?} @var{vec1} @var{vec2} ... -> exact nonnegative integer or #f
Find and return the index of the first elements in @var{vec1},
@var{vec2}, @dots{} that satisfy @var{pred?}.  If no matching element is
found by the end of the shortest vector, @false{} is returned.

Examples:

@example
(vector-index even? '#(3 1 4 1 5 9))
=> 2

(vector-index < '#(3 1 4 1 5 9 2 5 6) '#(2 7 1 8 2))
=> 1

(vector-index = '#(3 1 4 1 5 9 2 5 6) '#(2 7 1 8 2))
=> #f
@end example
@end defun


@defun vector-index-right @var{pred?} @var{vec1} @var{vec2} ... -> exact nonnegative integer or #f
Like @func{vector-index}, but it searches right--to--left, rather than
left--to--right, and all of the vectors must have the same length.
@end defun


@defun vector-skip @var{pred?} @var{vec1} @var{vec2} ... -> exact nonnegative integer or #f
Find and return the index of the first elements in @var{vec1},
@var{vec2}, @dots{} that do not satisfy @var{pred?}.  If all the values
in the vectors satisfy @var{pred?} until the end of the shortest vector,
this returns @false{}.  This is equivalent to:

@example
(vector-index (lambda (x1 x2 иии)
                (not (pred? x1 x1 иии)))
              vec1 vec2 ...)
@end example

Example:

@example
(vector-skip number? '#(1 2 a b 3 4 c d))
=> 2
@end example
@end defun


@defun vector-skip-right @var{pred?} @var{vec1} @var{vec2} ... -> exact nonnegative integer or #f
Like @func{vector-skip}, but it searches for a non--matching element
right--to--left, rather than left--to--right, and all of the vectors
must have the same length.  This is equivalent to:

@example
(vector-index-right (lambda (x1 x2 ...)
                      (not (pred? x1 x1 ...)))
                    vec1 vec2 ...)
@end example
@end defun


@defun vector-binary-search @var{vec} @var{value} @var{cmp} -> exact nonnegative integer or #f
Similar to @func{vector-index} and @func{vector-index-right}, but
instead of searching left to right or right to left, this performs a
binary search.  @var{cmp} should be a procedure of two arguments and
return: a negative integer, which indicates that its first argument is
less than its second; zero, which indicates that they are equal; a
positive integer, which indicates that the first argument is greater
than the second argument.  An example @var{cmp} might be:

@example
(lambda (char1 char2)
  (cond [(char<? char1 char2) -1]
        [(char=? char1 char2) 0]
        [else 1]))
@end example
@end defun


@defun vector-any @var{pred?} @var{vec1} @var{vec2} ... -> value or #f
Find the first set of elements in parallel from @var{vec1}, @var{vec2},
... for which @var{pred?} returns a true value.  If such a parallel set
of elements exists, @func{vector-any} returns the value that @var{pred?}
returned for that set of elements.  The iteration is strictly
left--to--right.
@end defun


@defun vector-every @var{pred?} @var{vec1} @var{vec2} ... -> value or #f
If, for every index @var{i} between 0 and the length of the shortest
vector argument, the set of elements:

@example
(vector-ref @var{vec1} @var{i})
(vector-ref @var{vec2} @var{i})
 иии
@end example

@noindent
satisfies @var{pred?}, @func{vector-every} returns the value that
@var{pred?}  returned for the last set of elements, at the last index of
the shortest vector.  The iteration is strictly left--to--right.
@end defun

@c page
@node srfi vector spec mutators
@subsubsection Mutators


@defun vector-set! @var{vec} @var{i} @var{value} -> unspecified
@rnrs{5} Assign the contents of the location at @var{i} in @var{vec} to
@var{value}.
@end defun


@defun vector-swap! @var{vec} @var{i} @var{j} -> unspecified
Swap or exchange the values of the locations in @var{vec} at @var{i} and
@var{j}.
@end defun


@defun vector-fill! @var{vec} @var{fill} [@var{start} [@var{end}]] -> unspecified
@rnrs{5}+ Assign the value of every location in @var{vec} between
@var{start}, which defaults to 0 and @var{end}, which defaults to the
length of @var{vec}, to @var{fill}.
@end defun


@defun vector-reverse! @var{vec} [@var{start} [@var{end}]] -> unspecified
Destructively reverse the contents of the sequence of locations in
@var{vec} between @var{start} and @var{end}.  Start defaults to 0 and
end defaults to the length of @var{vec}.  Note that this does not deeply
reverse.
@end defun


@defun vector-copy! @var{target} @var{tstart} @var{source} [@var{sstart} [@var{send}]] -> unspecified
Copy a block of elements from @var{source} to @var{target}, both of
which must be vectors, starting in @var{target} at @var{tstart} and
starting in @var{source} at @var{sstart}, ending when @code{@var{send} -
@var{sstart}} elements have been copied.  It is an error for
@var{target} to have a length less than:

@example
@var{tstart} + (@var{send} - @var{sstart})
@end example

@var{sstart} defaults to 0 and send defaults to the length of
@var{source}.
@end defun


@defun vector-reverse-copy! @var{target} @var{tstart} @var{source} [@var{sstart} [@var{send}]] -> unspecified
Like @func{vector-copy!}, but this copies the elements in the reverse
order.  It is an error if @var{target} and @var{source} are identical
vectors and the @var{target} and @var{source} ranges overlap; however,
if @code{@var{tstart} = @var{sstart}}, @func{vector-reverse-copy!}
behaves as:

@example
(vector-reverse! @var{target} @var{tstart} @var{send})
@end example

@noindent
would.
@end defun

@c page
@node srfi vector spec conv
@subsubsection Conversion


@defun vector->list @var{vec} [@var{start} [@var{end}]] -> proper-list
@rnrs{5} Create a list containing the elements in @var{vec} between
@var{start}, which defaults to 0, and @var{end}, which defaults to the
length of @var{vec}.
@end defun


@defun reverse-vector->list @var{vec} [@var{start} [@var{end}]] -> proper-list
Like @func{vector->list}, but the resulting list contains the elements
in reverse between the the specified range.
@end defun


@defun list->vector @var{proper-list} -> vector
@rnrs{5} Create a vector of elements from @var{proper-list}.
@end defun


@defun reverse-list->vector @var{proper-list} -> vector
Like @func{list->vector}, but the resulting list contains the elements
in reverse of @var{proper-list}.
@end defun

@c page
@node srfi vector ack
@subsection Acknowledgements


Thanks to Olin Shivers for his wonderfully complete list and string
packages; to all the members of the @code{#scheme} @acronym{IRC} channel
on Freenode who nitpicked a great deal, but also helped quite a lot in
general, and helped test the reference implementation in various Scheme
systems; to Michael Burschik for his numerous comments; to Sergei Egorov
for helping to narrow down the procedures; to Mike Sperber for putting
up with an extremely overdue draft; to Felix Winkelmann for continually
bugging me about finishing up the @srfi{} so that it would be only
overdue and not withdrawn; and to everyone else who gave questions,
comments, thoughts, or merely attention to the @srfi{}.

@c page
@node srfi vector references
@subsection References


@emph{The Revised5 Report on Scheme}.  R. Kelsey, W. Clinger, J. Rees
(editors).  Higher--Order and Symbolic Computation, Vol. 11, No. 1,
September, 1998, and ACM SIGPLAN Notices, Vol. 33, No. 9, October, 1998.

@center @url{http://www.schemers.org/Documents/Standards/R5RS/}

@noindent
@emph{@srfi{}: Scheme Request for Implementation}.  The @srfi{} website
can be found at:

@center @url{http://srfi.schemers.org/}

@noindent
@emph{@ansrfi{1}: List Library}.  A @srfi{} of list processing procedures,
written by Olin Shivers.

@center @url{http://srfi.schemers.org/srfi-1/}

@noindent
@emph{@ansrfi{13}: String Library}.  A @srfi{} of string processing
procedures, written by Olin Shivers.

@center @url{http://srfi.schemers.org/srfi-13/}

@noindent
@emph{@ansrfi{23}: Error Reporting Mechanism}.  A @srfi{} that defines a
new primitive (error) for reporting that an error occurred, written by
Stephan Houben.

@center @url{http://srfi.schemers.org/srfi-23/}

@noindent
@emph{@ansrfi{32}: Sort Libraries (draft)}.  A @srfi{} of list and vector
sorting routines, written by Olin Shivers.

@center @url{http://srfi.schemers.org/srfi-32/}

@c end of file
